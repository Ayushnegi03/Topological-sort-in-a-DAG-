//Topology Algorithem
function tsort(edges) 
{
    var nodes   = {};
    var sorted  = [];
    var visited = {}; 
  
    var Node = function(id) 
    {
      this.id = id;
      this.afters = [];
    }

    edges.forEach(function(v) 
    {
      var from = v[0], to = v[1];
      if (!nodes[from]) nodes[from] = new Node(from);
      if (!nodes[to]) nodes[to]     = new Node(to);
      nodes[from].afters.push(to);
    });

    Object.keys(nodes).forEach(function visit(idstr, ancestors)
    {
      var node = nodes[idstr],
          id   = node.id;
      if (visited[idstr]) return;  
      if (!Array.isArray(ancestors)) ancestors = [];
      ancestors.push(id);
      visited[idstr] = true;
      node.afters.forEach(function(afterID)
      {
        if (ancestors.indexOf(afterID) >= 0)  
          throw new Error('closed chain : ' +  afterID + ' is in ' + id);
        visit(afterID.toString(), ancestors.map(function(v) { return v })); 
      });
      sorted.unshift(id);
    });
    return sorted;
  }
  function tsortTest()
  {
    var edges = [ [1, 2], [1, 3], [2, 4], [3, 4] ];
    var sorted = tsort(edges);
    console.log(sorted);
    edges = [ ['A', 'B'], ['B', 'C'], ['C', 'A'] ];
    try 
    {
      sorted = tsort(edges);
    }
    catch (e)
    {
      console.log(e.message);
    }
    var max = 100, iteration = 30;
    function randomInt(max)
    {
      return Math.floor(Math.random() * max) + 1;
    }
    edges = (function() 
    {
      var ret = [], i = 0;
      while (i++ < iteration) ret.push( [randomInt(max), randomInt(max)] );
      return ret;
    })();
    try 
    {
      sorted = tsort(edges);
      console.log("succeeded", sorted);
    }
    catch (e)
    {
      console.log("failed", e.message);
    }
  }
  if (typeof exports == 'object' && exports === this) 
  {
    module.exports = tsort;
    if (process.argv[1] === __filename) tsortTest();
  }
//  Output-
//  [ 1, 3, 2, 4 ]
//closed chain : A is in C
//succeeded [
//  98, 88, 85, 84, 77, 60, 57, 56, 64, 53, 71,
//  52, 47, 43, 41, 38, 48, 36, 37, 32, 30, 74,
//  82, 29, 28, 86, 26, 54, 42, 21, 87, 14, 13,
//  10, 76,  8,  5,  7,  4, 27, 89,  2, 66, 15,
//  81
//]
